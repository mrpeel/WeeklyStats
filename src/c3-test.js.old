/*global c3, d3, window, document, currentWeekJSON, previousWeekJSON, previousYearJSON, MonthlyDataJSON, visitorReturnJSON */
/*global console, visitorReturnJSONDesc, visitorReturnDiscrete, C3StatsChart, colorbrewer, searchTypeDiscreteJSON, quarterleyPageUsageJSON, MutationObserver, setTimeout, Masonry*/

var currentWeekData = [];
var previousWeekData = [];
var lastYearData = [];
var chart1,
    buttonTransform1;

var chart2,
    buttonTransform1;

var chart4, buttonTransform4;

var chart5, buttonTransform5,
    buttonTransform5D,
    statTypeChart5 = "raw";

var chart6,
    buttonTransform6;

var msnry;


window.onload = function () {
    processData();
    generateChart1();
    generateChart2();
    generateChart4();
    generateChart5();
    generateChart6();

    buttonTransform1 = document.querySelector("[id=transform1]");
    buttonTransform1.addEventListener("click", transformChart1, false);

    buttonTransform4 = document.querySelector("[id=transform4]");
    buttonTransform4.addEventListener("click", transformChart4, false);

    buttonTransform5 = document.querySelector("[id=transform5]");
    buttonTransform5.addEventListener("click", transformChart5, false);

    buttonTransform5D = document.querySelector("[id=transform5D]");
    buttonTransform5D.addEventListener("click", transformChart5Data, false);

    buttonTransform6 = document.querySelector("[id=transform6]");
    buttonTransform6.addEventListener("click", transformChart6, false);

    createMasonry();
    refreshCharts();
};

function createMasonry() {
    var elem = document.querySelector('.masonry-layout');

    msnry = new Masonry(elem, {
        // options
        "itemSelector": ".card",
        "columnWidth": ".card",
        "gutter": 10,
        "percentPosition": true
            //, "isFitWidth": "true"
            //,"isInitLayout": "false"
    });
}

function refreshCharts() {
    chart1.chart.flush();
    chart2.chart.flush();
    chart4.chart.flush();
    chart5.chart.flush();
    chart6.chart.flush();

}

/*
    animateLoad();

    var target = document.querySelector('#grid');

    // create an observer instance
    var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            console.table(mutation);

            if (mutation.type === "attributes" && mutation.attributeName === "data-columns") {
                animateLoad();
                console.log('Changed data columns');
            }
        });
    });

    // configuration of the observer:
    var config = {
        attributes: true
    };

    // pass in the target node, as well as the observer options
    observer.observe(target, config);

};


function animateLoad(counter) {

    var cardArray = document.querySelectorAll('.card:nth-child(n+2)');

    hideCards(cardArray);

    loadCard(0, cardArray);
}

function hideCards(cardArray) {
    var counter = 0;

    while (counter < cardArray.length) {
        cardArray[counter].classList.remove('show');
        counter++;
    }
}

function loadCard(counter, cardArray) {
    setTimeout(function () {

        cardArray[counter].classList.add('show');

        counter++;

        if (counter < cardArray.length) {
            loadCard(counter, cardArray);
        } else {
            setTimeout(function () {
                refreshCharts();
            }, 30);
        }

    }, 30);
}
*/

function generateChart1() {
    var dayOfWeekArray = ['x', '2015-09-28', '2015-09-29', '2015-09-30', '2015-10-01', '2015-10-02', '2015-10-03', '2015-10-04'];
    var currentWeekArray = ['Week starting 21/09/2015'];
    var lastWeekArray = ['Week starting 28/09/2015'];
    var lastYearArray = ['Median for the last year'];
    var columnData = [];

    Array.prototype.push.apply(currentWeekArray, currentWeekData);
    Array.prototype.push.apply(lastWeekArray, previousWeekData);
    Array.prototype.push.apply(lastYearArray, lastYearData);

    columnData.push(dayOfWeekArray);
    columnData.push(currentWeekArray);
    columnData.push(lastWeekArray);
    columnData.push(lastYearArray);


    chart1 = new C3StatsChart(columnData, "chart1");
    chart1.createWeekDayAreaChart();

}

function transformChart1() {
    chart1.transformAreaBar();
}

function generateChart2() {
    var currentYearArray = ['Current year'];
    var previousYearArray = ['Previous year'];
    var columnData = [];

    Array.prototype.push.apply(currentYearArray, MonthlyDataJSON.currentYearData);
    Array.prototype.push.apply(previousYearArray, MonthlyDataJSON.previousYearData);

    columnData.push(currentYearArray);
    columnData.push(previousYearArray);

    chart2 = new C3StatsChart(columnData, "chart2", MonthlyDataJSON.labels);
    chart2.createStaticVerticalTwoSeriesBarChart();

}



function generateChart4() {

    chart4 = new C3StatsChart(visitorReturnDiscrete.data, "chart4", visitorReturnDiscrete.labels);
    chart4.createHorizontalBarChart("Time to return");

}

function transformChart4() {

    chart4.transformHorizontalStackedGrouped();

}


function generateChart5() {

    chart5 = new C3StatsChart(searchTypeDiscreteJSON.data, "chart5", searchTypeDiscreteJSON.labels);
    chart5.createHorizontalBarChart("Search type");

}

function transformChart5() {

    chart5.transformHorizontalStackedGrouped();

}

function transformChart5Data() {

    if (statTypeChart5 === "raw") {
        chart5.refreshChartData(searchTypeDiscreteJSON.dataPerSession, searchTypeDiscreteJSON.labelsPerSession);
        statTypeChart5 = "perSession";
    } else {
        chart5.refreshChartData(searchTypeDiscreteJSON.data, searchTypeDiscreteJSON.labels);
        statTypeChart5 = "raw";
    }
}


function generateChart6() {

    chart6 = new C3StatsChart(quarterleyPageUsageJSON.data, "chart6", quarterleyPageUsageJSON.labels, quarterleyPageUsageJSON.seriesLabels);
    chart6.createStackedVerticalBarChart("Percentage of visits");

}

function transformChart6() {

    chart6.transformVerticalStackedGrouped();

}

function processData() {
    var dayData = {
            day0: [],
            day1: [],
            day2: [],
            day3: [],
            day4: [],
            day5: [],
            day6: []
        },
        dayLoop;


    /* Process current week data */
    returnCurrentWeek().rows.forEach(function (row, i) {
        dayData['day' + row[1]].push(+row[2]);
    });

    for (dayLoop = 1; dayLoop <= 7; dayLoop++) {
        if (dayData['day' + (dayLoop % 7)] === undefined) {
            currentWeekData.push(0);
        } else {
            currentWeekData.push(dayData['day' + (dayLoop % 7)][0]);

        }
    }


    //Reset day data
    dayData = {
        day0: [],
        day1: [],
        day2: [],
        day3: [],
        day4: [],
        day5: [],
        day6: []
    };

    /* Process previous week data */
    returnPreviousWeek().rows.forEach(function (row, i) {
        dayData['day' + row[1]].push(+row[2]);
    });

    for (dayLoop = 1; dayLoop <= 7; dayLoop++) {
        if (dayData['day' + (dayLoop % 7)] === undefined) {
            previousWeekData.push(0);
        } else {
            previousWeekData.push(dayData['day' + (dayLoop % 7)][0]);

        }
    }

    //Reset day data
    dayData = {
        day0: [],
        day1: [],
        day2: [],
        day3: [],
        day4: [],
        day5: [],
        day6: []
    };
    /* Process last year data */

    returnPreviousYear().rows.forEach(function (row, i) {
        dayData['day' + row[2]].push(+row[3]);
    });

    /* Loop through day values and check whether there is a set of values for the week day.
     *  If present, retrieve median value.
     *  If not, add 0 in.
     *  Modulus is used to access data element so function can start with day 1 (Monday) and loop through day 6 then 0 (Sunday)
     */
    for (dayLoop = 1; dayLoop <= 7; dayLoop++) {
        if (dayData['day' + (dayLoop % 7)] === undefined) {
            lastYearData.push(0);
        } else {
            //Sort array in ascending order
            sortNumericalArray(dayData['day' + (dayLoop % 7)]);

            //Identify median and push into data set
            lastYearData.push(dayData['day' + (dayLoop % 7)][Math.round(dayData['day' + (dayLoop % 7)].length / 2)]);


        }
    }
}

function sortNumericalArray(numericalArray) {
    "use strict";
    numericalArray.sort(function (a, b) {
        return a - b;
    });

}

function sortNumericalArrayDescending(numericalArray) {
    "use strict";
    numericalArray.sort(function (a, b) {
        return b - a;
    });

}

function returnCurrentWeek() {
    return currentWeekJSON;
}

function returnPreviousWeek() {
    return previousWeekJSON;

}

function returnPreviousYear() {
    return previousYearJSON;
}
